#!/bin/bash

# This script is made possible thanks to
# Princeton University "About WordNet." WordNet. Princeton University. 2010.
# https://wordnet.princeton.edu/

# WordNet Release 3.0 This software and database is being provided to you,
# the LICENSEE, by Princeton University under the following license.
# By obtaining, using and/or copying this software and database, you agree
# that you have read, understood, and will comply with these terms and
# conditions.: Permission to use, copy, modify and distribute this software
# and database and its documentation for any purpose and without fee or
# royalty is hereby granted, provided that you agree to comply with the
# following copyright notice and statements, including the disclaimer, and
# that the same appear on ALL copies of the software, database and
# documentation, including modifications that you make for internal use or
# for distribution. WordNet 3.0 Copyright 2006 by Princeton University. All
# rights reserved. THIS SOFTWARE AND DATABASE IS PROVIDED "AS IS" AND
# PRINCETON UNIVERSITY MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
# IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PRINCETON UNIVERSITY
# MAKES NO REPRESENTATIONS OR WARRANTIES OF MERCHANT- ABILITY OR FITNESS
# FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE,
# DATABASE OR DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS,
# COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS. The name of Princeton University
# or Princeton may not be used in advertising or publicity pertaining to
# distribution of the software and/or database. Title to copyright in this
# software, database and any associated documentation shall at all times
# remain with Princeton University and LICENSEE agrees to preserve same.

wn_dir="$HOME/.files/dict"
version="0.1.0"

used_args=0

while true; do
    clear
    echo -e "thesaurus v$version, powered by:"
    echo -e 'Princeton University "About WordNet." WordNet. Princeton University. 2010.'
    echo -e "https://wordnet.princeton.edu/"

    if [ $used_args -eq 0 ] && [ $# -gt 0 ]; then
        word="$*"
        echo "word: $word"
        used_args=1
    else
        read -rep "word: " word
    fi
    echo

    if [[ -z "$word" ]]; then
        echo "please enter a word"
        sleep 1
        continue
    fi

    key="${word// /_}"
    found=0

    for pos in noun verb adj adv; do
        index_file="$wn_dir/index.$pos"
        data_file="$wn_dir/data.$pos"

        [[ -f "$index_file" && -f "$data_file" ]] || continue

        line=$(awk -v w="$key" 'tolower($1) == tolower(w) { print; exit }' "$index_file")

        if [[ -n "$line" ]]; then
            found=1
            echo "$word - $pos:"

            offsets=$(echo "$line" | awk '{for (i=6; i<=NF; i++) if ($i ~ /^[0-9]+$/) print $i}')
            seen=()

            while read -r offset; do
                decimal=$((10#$offset))
                pattern=$(printf "^%08d" "$decimal")
                syn_line=$(grep "$pattern" "$data_file")

                if [[ -n "$syn_line" ]]; then
                    # Extract word count
                    w_cnt_hex=$(echo "$syn_line" | awk '{print $4}')
                    w_cnt=$((16#$w_cnt_hex))

                    # Extract words
                    words=()
                    for ((i=0; i<w_cnt; i++)); do
                        word_i=$(echo "$syn_line" | awk -v n=$((5 + i*2)) '{print $n}')
                        [[ "$word_i" != "$key" ]] && words+=("$word_i")
                    done

                    seen+=("${words[@]}")
                fi
            done <<< "$offsets"

            # Deduplicate and sort
            if [[ ${#seen[@]} -eq 0 ]]; then
                echo "no synonyms found"
            else
              printf '%s\n' "${seen[@]}" | sed 's/_/ /g' | awk '!seen[$0]++' | sort
            fi

            echo
        fi
    done

    if [[ "$found" -eq 0 ]]; then
        echo "no synonyms found for '$word'"
        echo
    fi

    echo -n "press any key to continue..."
    read -rsn1
done

